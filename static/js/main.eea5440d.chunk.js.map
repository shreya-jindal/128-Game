{"version":3,"sources":["functions/Grid_compare.js","functions/GridOperations.js","functions/GameMoves.js","functions/Features.js","RowComponent.js","App.js","index.js"],"names":["Grid_compare","a1","a2","length","i","Array","addNewNumber","grid","GridCopy","map","row","element","indexesOfZeros","_","j","push","x","y","spot","Math","floor","random","randomNumber","slideRight","arr","filter","e","fill","concat","combineNumbers","Score","Number","localStorage","getItem","BestScore","undefined","setItem","toString","horizontalMirror","reverse","transpose","RightMove","UpdatedGridCopy","LeftMove","DownMove","UpMove","newGame","Row","RowKey","num","number","Cell","CellClass","CellText","className","App","useState","Board","setBoard","setScore","setBestScore","Message","setMessage","useEffect","window","addEventListener","handleKeyDown","removeEventListener","ScoreFromDB","BestScoreFromDB","Won","checkWinCondition","Lost","reduce","num1","num2","checkLostCondition","event","preventDefault","key","type","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eea5440d.chunk.js","sourcesContent":["//if the multidementional arrays are same , the function returns true else false;\r\nexport function Grid_compare(a1, a2) {\r\n    if(a1.length !== a2.length) {\r\n     return false;\r\n    }\r\n    for(var i in a1) {\r\n     if(a1[i] instanceof Array && a2[i] instanceof Array) {\r\n      if(!Grid_compare(a1[i], a2[i])) {\r\n       return false;\r\n      }\r\n     }\r\n     else if(a1[i] !== a2[i]) {\r\n      return false;\r\n     }\r\n    }\r\n    return true;\r\n   }","//To add new numbers on the board\r\nexport const addNewNumber= (grid)=>{\r\n\r\n    let GridCopy=grid.map((row)=>{\r\n        return row.map((element)=> element)\r\n      })\r\n  \r\n    let indexesOfZeros=[];\r\n    grid.map((row,i)=>{\r\n      return row.map((_,j)=>{\r\n          if(!grid[i][j])\r\n          return indexesOfZeros.push({\r\n            x:i,\r\n            y:j\r\n          })\r\n      })\r\n  })\r\n\r\n  if(indexesOfZeros.length===0)\r\n  return GridCopy;\r\n\r\n    let spot=indexesOfZeros[Math.floor(Math.random()*indexesOfZeros.length)];\r\n\r\n    \r\n    let randomNumber= (Math.random()>0.5)? 2:4 ;\r\n\r\n    GridCopy[spot.x][spot.y]= randomNumber;\r\n\r\n    return GridCopy;\r\n  }\r\n\r\n//shift the tiles to right\r\nexport  const slideRight=(grid)=>{\r\n\r\n    return grid.map(row=>{\r\n      let arr=row.filter(e=>e);\r\n      let zeros=Array(grid.length-arr.length).fill(0);\r\n      arr=zeros.concat(arr);\r\n      return arr;\r\n    })\r\n  \r\n  }\r\n\r\n//combine same tiles\r\nexport  const combineNumbers = grid =>{\r\n\r\n  let Score=Number(localStorage.getItem(\"Score\"))\r\n  let BestScore=Number(localStorage.getItem(\"BestScore\"))\r\n\r\n    for(let j=0;j<grid.length;j++){\r\n      let row=grid[j];\r\n    for(let i=row.length-1;i>0;i--){\r\n      if(row[i]===row[i-1]){\r\n        row[i]*=2;\r\n        row[i-1]=0;\r\n        \r\n        //Updating Score and Best Score in local Storage\r\n        if(Score!==undefined)\r\n          Score += (row[i]);\r\n        BestScore= (Score>BestScore) ? Score:BestScore;\r\n        localStorage.setItem(\"Score\",Score.toString());\r\n        localStorage.setItem(\"BestScore\",BestScore.toString());\r\n        \r\n      }\r\n    }\r\n  }\r\n  return grid;\r\n  }\r\n\r\n//return horizontally mirrored grid\r\nexport const horizontalMirror = grid =>{\r\n    let GridCopy=grid.map((row)=>{\r\n      return row.map((element)=> element)\r\n    })\r\n\r\n    let MirroredGrid=GridCopy.map(row=>{\r\n      return row.reverse()\r\n    })\r\n\r\n    return MirroredGrid;\r\n\r\n  }\r\n\r\nexport const transpose = grid => grid[0].map((x,i) => grid.map(x => x[i]))\r\n\r\n","import { Grid_compare } from \"./Grid_compare\";\r\nimport { addNewNumber, slideRight, combineNumbers, horizontalMirror, transpose } from \"./GridOperations\";\r\n\r\n//functions of arrow key down\r\n\r\n  export function RightMove(grid){\r\n  \r\n    let GridCopy=grid.map((row)=>{\r\n      return row.map((element)=> element)\r\n    })\r\n  \r\n    //On Right Arrow Key down, slide numbers right , combine same numbers and slide again\r\n    let UpdatedGridCopy= slideRight(GridCopy);\r\n    UpdatedGridCopy= combineNumbers(UpdatedGridCopy);\r\n    UpdatedGridCopy= slideRight(UpdatedGridCopy)\r\n    \r\n    //If no change on key down, return copy of original grid. Else add new number to it\r\n    if(Grid_compare(UpdatedGridCopy,GridCopy))\r\n      return GridCopy;\r\n\r\n      UpdatedGridCopy= addNewNumber (UpdatedGridCopy);\r\n    return UpdatedGridCopy;\r\n  \r\n  }\r\n\r\n  export function LeftMove(grid){\r\n  \r\n    let GridCopy=grid.map((row)=>{\r\n      return row.map((element)=> element)\r\n    })\r\n  \r\n    \r\n    //On Left Arrow Key down, mirror the rows, slide numbers right , combine same numbers , slide again and mirror back\r\n    let UpdatedGridCopy=horizontalMirror(GridCopy);\r\n    UpdatedGridCopy=slideRight(UpdatedGridCopy);\r\n    UpdatedGridCopy=combineNumbers(UpdatedGridCopy);\r\n    UpdatedGridCopy=slideRight(UpdatedGridCopy) ; \r\n    UpdatedGridCopy=horizontalMirror(UpdatedGridCopy);\r\n\r\n    \r\n    //If no change on key down, return copy of original grid. Else add new number to it\r\n    if(Grid_compare(UpdatedGridCopy,GridCopy))\r\n    return GridCopy;\r\n\r\n    UpdatedGridCopy= addNewNumber (UpdatedGridCopy);\r\n    return UpdatedGridCopy;\r\n  }\r\n\r\n  export function DownMove(grid){\r\n  \r\n    let GridCopy=grid.map((row)=>{\r\n      return row.map((element)=> element)\r\n    })\r\n  \r\n    //On Down Arrow Key down, transpose the grid, perform operation of right key down and transpose back\r\n    let UpdatedGridCopy= transpose (GridCopy);\r\n    UpdatedGridCopy= slideRight (UpdatedGridCopy);\r\n    UpdatedGridCopy= combineNumbers (UpdatedGridCopy);\r\n    UpdatedGridCopy= slideRight (UpdatedGridCopy);\r\n    UpdatedGridCopy= transpose (UpdatedGridCopy);\r\n    \r\n    //If no change on key down, return copy of original grid. Else add new number to it\r\n    if(Grid_compare(UpdatedGridCopy,GridCopy))\r\n      return GridCopy;\r\n\r\n    UpdatedGridCopy= addNewNumber (UpdatedGridCopy);\r\n    return UpdatedGridCopy;\r\n  }\r\n\r\n  export function UpMove(grid){\r\n  \r\n    let GridCopy=grid.map((row)=>{\r\n      return row.map((element)=> element)\r\n    })\r\n  \r\n    //On Up Arrow Key down, transpose the grid, perform operations of left key down and transpose back\r\n    let UpdatedGridCopy= transpose (GridCopy);\r\n    UpdatedGridCopy= horizontalMirror (UpdatedGridCopy);\r\n    UpdatedGridCopy= slideRight (UpdatedGridCopy);\r\n    UpdatedGridCopy= combineNumbers (UpdatedGridCopy);\r\n    UpdatedGridCopy= slideRight (UpdatedGridCopy) ; \r\n    UpdatedGridCopy= horizontalMirror (UpdatedGridCopy);\r\n    UpdatedGridCopy= transpose (UpdatedGridCopy);\r\n\r\n    //If no change on key down, return copy of original grid. Else add new number to it\r\n    if(Grid_compare(UpdatedGridCopy,grid))\r\n      return GridCopy;\r\n\r\n    UpdatedGridCopy= addNewNumber (UpdatedGridCopy);\r\n      return UpdatedGridCopy;\r\n  }\r\n\r\n ","import { addNewNumber } from \"./GridOperations\";\r\nimport { RightMove,LeftMove, DownMove, UpMove } from './GameMoves';\r\nimport { Grid_compare } from \"./Grid_compare\";\r\n\r\nexport function newGame(){\r\n\r\n    let grid= [ \r\n    [0,0,0,0],\r\n    [0,0,0,0],\r\n    [0,0,0,0],\r\n    [0,0,0,0] \r\n  ]\r\n\r\n    //adding 2 numbers at random place\r\n    grid= addNewNumber(grid);\r\n    grid= addNewNumber(grid);\r\n\r\n    //reseting Score to 0\r\n    localStorage.setItem(\"Score\",\"0\");\r\n\r\n    return grid;\r\n  }\r\n\r\n\r\n  export const checkWinCondition= grid =>{\r\n\r\n    //if any number===128 =>WON\r\n    for(let i=0;i<grid.length;i++){\r\n      for(let j=0;j<grid[0].length;j++){\r\n        if(grid[i][j]===128){\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  export const checkLostCondition= grid =>{\r\n\r\n    //if board is empty i.e. sum of all numbers==0 => NOT Lost\r\n    let sumOfNumbers=grid.map((row)=>{\r\n      return row.reduce((a1,a2)=>a1+a2);\r\n    }).reduce((num1,num2)=>num1+num2);\r\n\r\n    if(sumOfNumbers===0){\r\n      return false;\r\n    }\r\n\r\n    let ScoreFromDB = Number(localStorage.getItem(\"Score\"));\r\n    let BestScoreFromDB = Number(localStorage.getItem(\"BestScore\"));\r\n\r\n    //if original grid is different from grid after any move =>NOT Lost , otherwise Lost\r\n    if( !Grid_compare(grid,RightMove(grid)) ){\r\n      if (ScoreFromDB !== undefined) {\r\n        localStorage.setItem(\"Score\",ScoreFromDB);\r\n        localStorage.setItem(\"BestScore\",BestScoreFromDB);\r\n      }  \r\n      return false;\r\n    }\r\n    if( !Grid_compare(grid,LeftMove(grid)) ){\r\n      if (ScoreFromDB !== undefined) {\r\n        localStorage.setItem(\"Score\",ScoreFromDB);\r\n        localStorage.setItem(\"BestScore\",BestScoreFromDB);\r\n      }\r\n      return false;\r\n    }\r\n    if( !Grid_compare(grid,UpMove(grid)) ){\r\n      if (ScoreFromDB !== undefined) {\r\n        localStorage.setItem(\"Score\",ScoreFromDB);\r\n        localStorage.setItem(\"BestScore\",BestScoreFromDB);\r\n      }  \r\n      return false;\r\n    }\r\n    if( !Grid_compare(grid,DownMove(grid)) ){\r\n      if (ScoreFromDB !== undefined) {\r\n        localStorage.setItem(\"Score\",ScoreFromDB);\r\n        localStorage.setItem(\"BestScore\",BestScoreFromDB);\r\n      }  \r\n      return false;\r\n    }\r\n\r\n    localStorage.setItem(\"Score\",ScoreFromDB);\r\n    localStorage.setItem(\"BestScore\",BestScoreFromDB);\r\n    return true;\r\n  }","\r\nexport const Row = ({ RowKey }) => {\r\n    return (\r\n      <tr>\r\n        {\r\n          RowKey.map((num, i) =>\r\n            <Cell key={i} number={num} />\r\n          )\r\n        }\r\n      </tr>\r\n    )\r\n  }\r\n  \r\n  const Cell = ({ number }) => {\r\n    let CellClass = \"cell\";\r\n    let CellText = (number) ? `${number}` : \" \";\r\n    if (number) {\r\n      CellClass += ` color-${number}`;\r\n    }\r\n  \r\n    return (\r\n      <>\r\n        <td>\r\n          <div className={CellClass}>\r\n            <div className=\"number\">{CellText}</div>\r\n          </div>\r\n        </td>\r\n  \r\n      </>\r\n    )\r\n  }","import { useEffect, useState } from 'react';\nimport './App.css';\nimport { RightMove, LeftMove, DownMove, UpMove } from './functions/GameMoves';\nimport { checkWinCondition, checkLostCondition } from './functions/Features';\nimport { newGame } from './functions/Features';\nimport { Row } from './RowComponent';\n\n\nconst App = () => {\n\n  let [Board, setBoard] = useState(\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0]\n    ]\n  )\n\n  let [Score, setScore] = useState(0);\n\n  let [BestScore, setBestScore] = useState(0);\n\n  let [Message, setMessage] = useState(undefined);\n\n  useEffect(() => {\n    setBoard(newGame());\n    localStorage.setItem(\"Score\", \"0\");\n    localStorage.setItem(\"BestScore\", \"0\");\n  }, [])\n\n\n  useEffect(() => {\n    if (Message === undefined)\n      window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n\n  useEffect(() => {\n    //get scores from local storage\n    let ScoreFromDB = Number(localStorage.getItem(\"Score\"))\n    let BestScoreFromDB = Number(localStorage.getItem(\"BestScore\"))\n    if (ScoreFromDB !== undefined) {\n      setScore(ScoreFromDB);\n      setBestScore(BestScoreFromDB);\n    }\n\n    //on change in board, check for:- if won or lost condition\n    let Won = checkWinCondition(Board);\n    let Lost = checkLostCondition(Board);\n    if (Won) {\n      setMessage(\"Congrations!! \\n You Win!!\")\n    }\n    if (Lost) {\n      setMessage(\"  Oops! \\nGame Over!\")\n    }\n\n  }, [Board])\n\n\n  //function to handle key operations\n  const handleKeyDown = (event) => {\n    event.preventDefault();\n\n    switch (event.key) {\n      case \"ArrowUp\": setBoard(UpMove(Board));\n        break;\n      case \"ArrowDown\": setBoard(DownMove(Board));\n        break;\n      case \"ArrowRight\": setBoard(RightMove(Board));\n        break;\n      case \"ArrowLeft\": setBoard(LeftMove(Board));\n        break;\n      default:\n    }\n  }\n\n\n  return (\n    <>\n\n      <div className=\"Title\">\n        <div className=\"cell\"><div className=\"number\">1</div></div>\n        <div className=\"cell color-2\"><div className=\"number\">2</div></div>\n        <div className=\"cell color-8\"><div className=\"number\">8</div></div>\n        <div className=\"Game\"><div className=\"number\">GAME</div></div>\n      </div>\n\n      <div className=\"ScoresContainer\">\n        <div>\n          <div>Score :</div>\n          <div>{`${Score}`}</div>\n        </div>\n\n        <div>\n          <div>Best Score:</div>\n          <div>{`${BestScore}`}</div>\n        </div>\n\n        <button type=\"button\" onClick={() => { setMessage(undefined); setBoard(newGame); }}> Restart </button>\n      </div>\n\n      <div className=\"message-position\">\n        <table>\n          <tbody>\n            {\n              Board.map((row, i) => <Row key={i} RowKey={row}></Row>)\n            }\n          </tbody>\n        </table>\n\n        {(Message !== undefined) ? <div className=\"message\"><pre>{Message}</pre></div> : \"\"}\n      </div>\n\n      <div className=\"instruction\">Join via Arrow Keys and get to the 128 tile!</div>\n\n    </>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}